input_line = gets

n = input_line.split[0].to_i
$h = input_line.split[1].to_i
$w = input_line.split[2].to_i

if n==1 then
    p 0
else

town = []
dist = []
all_town = []

for i in 0...n
    input_line = gets
    town[i] = [input_line.split[0].to_i, input_line.split[1].to_i]
    dist[i] = Array.new(n, 0)
    all_town[i] = i
end

#2街間の距離をループ対応で測る
def town_distance(from, to)
    low_x = [from[0], to[0]].min
    high_x = [from[0], to[0]].max
    x_dist = [high_x-low_x, $w-high_x+low_x].min
    
    low_y = [from[1], to[1]].min
    high_y = [from[1], to[1]].max
    y_dist = [high_y-low_y, $h-high_y+low_y].min
    
    return x_dist+y_dist
end

total_dist = 0
visited_town = [0, 0]
mindist = Float::INFINITY
dist_index = []

#いったん距離を保管しとく（いらんかも）
for i in 0...n
    for j in 0...n
        if i==j then
            next
        end
        dist[i][j] = town_distance(town[i], town[j])
        
        if mindist > dist[i][j] then
            mindist = dist[i][j]
            visited_town[0] = i
            visited_town[1] = j
        end
    end
end

# p visited_town
# p mindist
total_dist = mindist

#p total_dist

#各町への、ここまででの最短距離
dp=[]
for i in 0...n
    dp[i] = [dist[visited_town[0]][i], dist[visited_town[1]][i]].min
end

#だんだんdpが0000000になってく
(n-2).times do 
    #距離0をのぞいた最小距離の街番号
    nearest_town = dp.index((dp-[0]).min)
    
    #その街への最短距離
    mindist = (dp-[0]).min
    total_dist += mindist
    
    #その街をルーラ追加したときの、他の街への最短距離更新
    for i in 0...n
        dp[i] = [dp[i], dist[nearest_town][i]].min
    end
    
    #p dp
end

p total_dist

end
